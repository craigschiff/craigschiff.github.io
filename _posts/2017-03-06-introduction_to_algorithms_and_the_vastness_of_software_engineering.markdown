---
layout: post
title:  "Introduction to algorithms, and the vastness of programming"
date:   2017-03-06 16:59:53 -0500
---


I came into Flatiron School pretty naive about software engineering (and even technology more generally). I had no exposure to it growing up, it was not offered in high school, and even in college I did not have any good friends involved in computer science. As a result, after a few weeks of learning how to program I imagined writing code and refactoring to make it more elegant and simple was a good representation of what computer science is. And i found it enjoyable.

However, in week three they let us know many former students wished they had more “computer science” or “algorithms” experience, and that they would be offering it to us on Saturdays for the rest of the course. I had no idea what to expect thinking what we had been doing all along was computer science. But as soon as I started working through the algorithms course materials I immediately found it super interesting. Not only was it a welcome break from the ruby heavy work of the past few weeks, the conceptual nature of “computer science” was at stark contrast to the occasionally syntax heavy process of web development. 

Through my development process I read about new components of ruby, try to understand it conceptually, and then try to familiarize myself with the syntax. When comfortable I move to the next lab, try to implement what I learned, but inevitably need to go back to make sure the syntax is correct. I also continue to look up syntax on topics already covered as I go. Overall, this learning process is enjoyable, and it is very satisfying to create things. However, I immediately found that the algorithms work was tapping into a different part of my brain, and I found it stimulating to an even greater degree than the web development work. I had a strong desire to learn more and more. Surprisingly, it reminded me of a Liner Algebra class I took a short six years ago, and I learned I had more computer science experience than i previously realized. 

While I am thrilled Flatiron exposed me to this other aspect of computer science, it also leads to a familiar dilemma. We have a fulsome curriculum as is, but the world of programming and computer science is so vast and so interesting that I often find myself branching off what I am learning in class to stuff only tangentially related. I now find myself doing labs about Rails but eager to get back to algorithms stuff and looking for other resources to learn more about it. This is similar to how I felt about scripting and SQL injection last week, and countless other subjects on a daily basis. My general approach to this is that learning more about programming will pay dividends regardless, there is real value in being generally interested in something, and these tangents are worth pursuing. But at the same time the number of tangents that I find engaging are so many that to watch videos and tutorials about all of them is essentially impossible. Thus, I am consistently fighting myself to ensure I am focused on productive topics and learning in a way that is efficient and not just aimless browsing. 

Overall this is definitely a positive. The number of interesting and varied branches off of computer science make me confident I will be able to find interesting computer science work and topics for the rest of my career. This is especially valuable to someone like myself, who is inherently uncomfortable with mastery and generally always looking to try something new. I just need to remind myself that I will have plenty of time to learn more about all of these topics eventually, and I do not always need to pursue them immediately. Also that learning everything about computer science and programming is impossible as the depth is infinite. As our instructor said, the more you learn the more you realize you dont know.  Even so, I have found an algorithms book and am looking forward to learning more about algorithms over the next few weeks. 

